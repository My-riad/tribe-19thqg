---
# Deployment for Profile Service
# Manages user profiles, personality traits, interests, and compatibility calculations
apiVersion: apps/v1
kind: Deployment
metadata:
  name: profile-service
  namespace: api-services
  labels:
    app: profile-service
    part-of: tribe
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: profile-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Ensures zero-downtime deployments
  template:
    metadata:
      labels:
        app: profile-service
        part-of: tribe
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3002"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: profile-service
        image: ${ECR_REPOSITORY_URI}/tribe/profile-service:${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
        - containerPort: 3002
          name: http
        env:
        - name: NODE_ENV
          value: "${ENVIRONMENT}"
        - name: PORT
          value: "3002"
        - name: LOG_LEVEL
          value: "info"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: profile-service-url
        envFrom:
        - configMapRef:
            name: profile-service-config
        - secretRef:
            name: profile-service-secrets
        resources:
          requests:
            cpu: "250m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 2
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop: ["ALL"]
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - profile-service
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 60

---
# Service for Profile Service
# Exposes the Profile Service within the cluster
apiVersion: v1
kind: Service
metadata:
  name: profile-service
  namespace: api-services
  labels:
    app: profile-service
    part-of: tribe
    tier: backend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: profile-service

---
# HorizontalPodAutoscaler for Profile Service
# Automatically scales the deployment based on CPU utilization
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: profile-service
  namespace: api-services
  labels:
    app: profile-service
    part-of: tribe
    tier: backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: profile-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# PodDisruptionBudget for Profile Service
# Ensures high availability during voluntary disruptions
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: profile-service-pdb
  namespace: api-services
  labels:
    app: profile-service
    part-of: tribe
    tier: backend
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: profile-service