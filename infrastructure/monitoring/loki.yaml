---
# ServiceAccount for Loki to access Kubernetes resources
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loki
  namespace: monitoring
  labels:
    app: loki
    part-of: tribe
    tier: observability

---
# ConfigMap containing Loki configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: monitoring
  labels:
    app: loki
    part-of: tribe
    tier: observability
data:
  loki.yaml: |
    auth_enabled: false

    server:
      http_listen_port: 3100
      grpc_listen_port: 9096

    common:
      path_prefix: /var/loki
      storage:
        filesystem:
          chunks_directory: /var/loki/chunks
          rules_directory: /var/loki/rules
      replication_factor: 1
      ring:
        kvstore:
          store: inmemory

    schema_config:
      configs:
        - from: 2022-01-01
          store: boltdb-shipper
          object_store: filesystem
          schema: v12
          index:
            prefix: index_
            period: 24h

    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      max_query_length: 721h
      max_query_parallelism: 32
      ingestion_rate_mb: 8
      ingestion_burst_size_mb: 16

    ruler:
      alertmanager_url: http://alertmanager:9093
      storage:
        type: local
        local:
          directory: /var/loki/rules
      rule_path: /var/loki/rules
      ring:
        kvstore:
          store: inmemory
      enable_api: true

    compactor:
      working_directory: /var/loki/compactor
      shared_store: filesystem
      compaction_interval: 10m
      retention_enabled: true
      retention_delete_delay: 2h
      retention_delete_worker_count: 150

    analytics:
      reporting_enabled: false

    chunk_store_config:
      max_look_back_period: 720h

    table_manager:
      retention_deletes_enabled: true
      retention_period: 720h

    querier:
      max_concurrent: 16

    frontend:
      compress_responses: true
      log_queries_longer_than: 10s

    querier_frontend:
      max_outstanding_per_tenant: 2048
      compress_responses: true

    tracing:
      enabled: true
      tempo:
        endpoint: tempo:4317
        insecure: true

---
# ConfigMap containing Promtail configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: monitoring
  labels:
    app: promtail
    part-of: tribe
    tier: observability
data:
  promtail.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    positions:
      filename: /var/lib/promtail/positions.yaml

    clients:
      - url: http://loki:3100/loki/api/v1/push

    scrape_configs:
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
          - role: pod
        pipeline_stages:
          - docker: {}
          - cri: {}
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_controller_name]
            regex: ([0-9a-z-.]+?)(-[0-9a-f]{8,10})?
            action: replace
            target_label: __tmp_controller_name
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name, __meta_kubernetes_pod_label_app, __tmp_controller_name, __meta_kubernetes_pod_name]
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: app
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component, __meta_kubernetes_pod_label_component]
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: component
          - action: replace
            source_labels: [__meta_kubernetes_pod_node_name]
            target_label: node_name
          - action: replace
            source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - action: replace
            replacement: $1
            separator: /
            source_labels: [namespace, app]
            target_label: job
          - action: replace
            source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
          - action: replace
            source_labels: [__meta_kubernetes_pod_container_name]
            target_label: container
          - action: replace
            replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels: [__meta_kubernetes_pod_uid, __meta_kubernetes_pod_container_name]
            target_label: __path__
          - action: replace
            source_labels: [__meta_kubernetes_pod_label_part_of]
            target_label: part_of
          - action: replace
            source_labels: [__meta_kubernetes_pod_label_tier]
            target_label: tier
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)

      - job_name: kubernetes-pods-static
        kubernetes_sd_configs:
          - role: pod
        pipeline_stages:
          - docker: {}
          - cri: {}
        relabel_configs:
          - action: drop
            regex: ''
            source_labels: [__meta_kubernetes_pod_annotation_kubernetes_io_config_hash]
          - action: replace
            source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name, __meta_kubernetes_pod_label_app, __meta_kubernetes_pod_name]
            regex: ^;*([^;]+)(;.*)?$
            target_label: app
          - action: replace
            source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component, __meta_kubernetes_pod_label_component]
            regex: ^;*([^;]+)(;.*)?$
            target_label: component
          - action: replace
            source_labels: [__meta_kubernetes_pod_node_name]
            target_label: node_name
          - action: replace
            source_labels: [__meta_kubernetes_namespace]
            target_label: namespace
          - action: replace
            replacement: $1
            separator: /
            source_labels: [namespace, app]
            target_label: job
          - action: replace
            source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
          - action: replace
            source_labels: [__meta_kubernetes_pod_container_name]
            target_label: container
          - action: replace
            replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels: [__meta_kubernetes_pod_uid, __meta_kubernetes_pod_container_name]
            target_label: __path__
          - action: replace
            source_labels: [__meta_kubernetes_pod_label_part_of]
            target_label: part_of
          - action: replace
            source_labels: [__meta_kubernetes_pod_label_tier]
            target_label: tier
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)

      - job_name: journal
        journal:
          max_age: 12h
          labels:
            job: systemd-journal
        relabel_configs:
          - source_labels: ['__journal__systemd_unit']
            target_label: 'unit'
          - source_labels: ['__journal__hostname']
            target_label: 'hostname'

    pipeline_stages:
      - match:
          selector: '{container="api-gateway"}'
          stages:
            - regex:
                expression: '.*trace_id=(\w+).*'
                source: message
            - labels:
                trace_id:
      - match:
          selector: '{container=~"auth-service|profile-service|tribe-service|event-service|matching-service|engagement-service|planning-service|payment-service|notification-service|ai-orchestration-service"}'
          stages:
            - regex:
                expression: '.*trace_id=(\w+).*'
                source: message
            - labels:
                trace_id:
      - match:
          selector: '{container=~".*"}'
          stages:
            - regex:
                expression: '.*level=(debug|info|warn|error|fatal).*'
                source: message
            - labels:
                level:
            - regex:
                expression: '.*error="([^"]+)".*'
                source: message
            - labels:
                error:

---
# ClusterRole for Promtail to access Kubernetes resources
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: promtail
  labels:
    app: promtail
    part-of: tribe
    tier: observability
rules:
  - apiGroups: [""]
    resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
    verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding for Promtail
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: promtail
  labels:
    app: promtail
    part-of: tribe
    tier: observability
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: promtail
subjects:
  - kind: ServiceAccount
    name: promtail
    namespace: monitoring

---
# ServiceAccount for Promtail
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promtail
  namespace: monitoring
  labels:
    app: promtail
    part-of: tribe
    tier: observability

---
# PersistentVolumeClaim for Loki data storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: loki-storage
  namespace: monitoring
  labels:
    app: loki
    part-of: tribe
    tier: observability
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: gp2

---
# Deployment for Loki log aggregation service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: monitoring
  labels:
    app: loki
    part-of: tribe
    tier: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: loki
        part-of: tribe
        tier: observability
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3100"
    spec:
      serviceAccountName: loki
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      containers:
        - name: loki
          image: grafana/loki:2.8.2
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/loki.yaml
          ports:
            - name: http
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9096
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: 3100
            initialDelaySeconds: 30
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /ready
              port: 3100
            initialDelaySeconds: 30
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 1
              memory: 2Gi
          volumeMounts:
            - name: config
              mountPath: /etc/loki/loki.yaml
              subPath: loki.yaml
            - name: storage
              mountPath: /var/loki
      volumes:
        - name: config
          configMap:
            name: loki-config
        - name: storage
          persistentVolumeClaim:
            claimName: loki-storage

---
# Service to expose Loki within the cluster
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: monitoring
  labels:
    app: loki
    part-of: tribe
    tier: observability
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3100"
spec:
  selector:
    app: loki
  ports:
    - name: http
      port: 3100
      targetPort: 3100
      protocol: TCP
    - name: grpc
      port: 9096
      targetPort: 9096
      protocol: TCP

---
# DaemonSet for Promtail log collector
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
  namespace: monitoring
  labels:
    app: promtail
    part-of: tribe
    tier: observability
spec:
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
        part-of: tribe
        tier: observability
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9080"
    spec:
      serviceAccountName: promtail
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
      containers:
        - name: promtail
          image: grafana/promtail:2.8.2
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/promtail/promtail.yaml
          ports:
            - name: http
              containerPort: 9080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: 9080
            initialDelaySeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /ready
              port: 9080
            initialDelaySeconds: 10
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          securityContext:
            readOnlyRootFilesystem: true
            runAsGroup: 0
            runAsUser: 0
          volumeMounts:
            - name: config
              mountPath: /etc/promtail/promtail.yaml
              subPath: promtail.yaml
            - name: run
              mountPath: /run/promtail
            - name: pods
              mountPath: /var/log/pods
              readOnly: true
            - name: docker
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: journal
              mountPath: /var/log/journal
              readOnly: true
            - name: positions
              mountPath: /var/lib/promtail
      volumes:
        - name: config
          configMap:
            name: promtail-config
        - name: run
          hostPath:
            path: /run/promtail
        - name: pods
          hostPath:
            path: /var/log/pods
        - name: docker
          hostPath:
            path: /var/lib/docker/containers
        - name: journal
          hostPath:
            path: /var/log/journal
        - name: positions
          hostPath:
            path: /var/lib/promtail

---
# Service to expose Promtail within the cluster
apiVersion: v1
kind: Service
metadata:
  name: promtail
  namespace: monitoring
  labels:
    app: promtail
    part-of: tribe
    tier: observability
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9080"
spec:
  selector:
    app: promtail
  ports:
    - name: http
      port: 9080
      targetPort: 9080
      protocol: TCP