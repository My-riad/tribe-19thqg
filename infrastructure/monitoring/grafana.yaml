---
# ServiceAccount for Grafana to access Kubernetes resources
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    part-of: tribe
    tier: observability

---
# ConfigMap containing Grafana data source configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
  labels:
    app: grafana
    part-of: tribe
    tier: observability
data:
  datasources.yaml: |
    apiVersion: 1

    datasources:
      - name: Prometheus
        type: prometheus
        uid: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: false
        jsonData:
          timeInterval: 15s
          queryTimeout: 120s
          httpMethod: POST
          exemplarTraceIdDestinations:
            - name: TraceID
              datasourceUid: tempo

      - name: Loki
        type: loki
        uid: loki
        access: proxy
        url: http://loki:3100
        editable: false
        jsonData:
          derivedFields:
            - datasourceUid: tempo
              matcherRegex: "trace_id=(\\w+)"
              name: TraceID
              url: "${__value.raw}"

      - name: Tempo
        type: tempo
        uid: tempo
        access: proxy
        url: http://tempo:3200
        editable: false
        jsonData:
          httpMethod: GET
          serviceMap:
            datasourceUid: prometheus

---
# ConfigMap containing Grafana dashboard provider configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-providers
  namespace: monitoring
  labels:
    app: grafana
    part-of: tribe
    tier: observability
data:
  dashboards.yaml: |
    apiVersion: 1

    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: true
        editable: false
        options:
          path: /var/lib/grafana/dashboards/default

      - name: 'tribe'
        orgId: 1
        folder: 'Tribe'
        type: file
        disableDeletion: true
        editable: false
        options:
          path: /var/lib/grafana/dashboards/tribe

---
# ConfigMap containing Grafana main configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
  labels:
    app: grafana
    part-of: tribe
    tier: observability
data:
  grafana.ini: |
    [server]
    root_url = https://monitoring.${DOMAIN_NAME}
    serve_from_sub_path = true

    [auth]
    disable_login_form = false
    disable_signout_menu = false

    [auth.anonymous]
    enabled = true
    org_name = Tribe
    org_role = Viewer

    [security]
    admin_user = admin
    admin_password = ${GRAFANA_ADMIN_PASSWORD}
    secret_key = ${GRAFANA_SECRET_KEY}

    [users]
    allow_sign_up = false
    auto_assign_org = true
    auto_assign_org_role = Editor

    [dashboards]
    min_refresh_interval = 5s

    [alerting]
    enabled = true
    execute_alerts = true

    [unified_alerting]
    enabled = true

    [feature_toggles]
    enable = tempoSearch tempoBackendSearch tempoServiceGraph

---
# ConfigMap containing default Grafana dashboards
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-default
  namespace: monitoring
  labels:
    app: grafana
    part-of: tribe
    tier: observability
data:
  kubernetes-cluster.json: |
    {"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations & Alerts","target":{"limit":100,"matchAny":false,"tags":[],"type":"dashboard"},"type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":1,"id":null,"links":[],"liveNow":false,"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":1,"panels":[],"title":"Cluster Overview","type":"row"},{"datasource":{"type":"prometheus","uid":"prometheus"},"fieldConfig":{"defaults":{"color":{"mode":"thresholds"},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"percent"},"overrides":[]},"gridPos":{"h":8,"w":6,"x":0,"y":1},"id":2,"options":{"colorMode":"value","graphMode":"area","justifyMode":"auto","orientation":"auto","reduceOptions":{"calcs":["lastNotNull"],"fields":"","values":false},"textMode":"auto"},"pluginVersion":"9.5.2","targets":[{"datasource":{"type":"prometheus","uid":"prometheus"},"expr":"sum(rate(node_cpu_seconds_total{mode!=\"idle\"}[5m])) by (instance) / on(instance) sum(rate(node_cpu_seconds_total[5m])) by (instance) * 100","interval":"","legendFormat":"CPU Usage","refId":"A"}],"title":"Cluster CPU Usage","type":"stat"},{"datasource":{"type":"prometheus","uid":"prometheus"},"fieldConfig":{"defaults":{"color":{"mode":"thresholds"},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"percent"},"overrides":[]},"gridPos":{"h":8,"w":6,"x":6,"y":1},"id":3,"options":{"colorMode":"value","graphMode":"area","justifyMode":"auto","orientation":"auto","reduceOptions":{"calcs":["lastNotNull"],"fields":"","values":false},"textMode":"auto"},"pluginVersion":"9.5.2","targets":[{"datasource":{"type":"prometheus","uid":"prometheus"},"expr":"sum(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / sum(node_memory_MemTotal_bytes) * 100","interval":"","legendFormat":"Memory Usage","refId":"A"}],"title":"Cluster Memory Usage","type":"stat"},{"datasource":{"type":"prometheus","uid":"prometheus"},"fieldConfig":{"defaults":{"color":{"mode":"thresholds"},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"percent"},"overrides":[]},"gridPos":{"h":8,"w":6,"x":12,"y":1},"id":4,"options":{"colorMode":"value","graphMode":"area","justifyMode":"auto","orientation":"auto","reduceOptions":{"calcs":["lastNotNull"],"fields":"","values":false},"textMode":"auto"},"pluginVersion":"9.5.2","targets":[{"datasource":{"type":"prometheus","uid":"prometheus"},"expr":"sum(node_filesystem_size_bytes{fstype!=\"tmpfs\"} - node_filesystem_free_bytes{fstype!=\"tmpfs\"}) / sum(node_filesystem_size_bytes{fstype!=\"tmpfs\"}) * 100","interval":"","legendFormat":"Disk Usage","refId":"A"}],"title":"Cluster Disk Usage","type":"stat"},{"datasource":{"type":"prometheus","uid":"prometheus"},"fieldConfig":{"defaults":{"color":{"mode":"thresholds"},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"none"},"overrides":[]},"gridPos":{"h":8,"w":6,"x":18,"y":1},"id":5,"options":{"colorMode":"value","graphMode":"area","justifyMode":"auto","orientation":"auto","reduceOptions":{"calcs":["lastNotNull"],"fields":"","values":false},"textMode":"auto"},"pluginVersion":"9.5.2","targets":[{"datasource":{"type":"prometheus","uid":"prometheus"},"expr":"sum(kube_pod_status_phase{phase=\"Running\"})","interval":"","legendFormat":"Running Pods","refId":"A"}],"title":"Running Pods","type":"stat"}]}
  node-exporter.json: |
    {"annotations":{"list":[{"builtIn":1,"datasource":{"type":"grafana","uid":"-- Grafana --"},"enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations & Alerts","target":{"limit":100,"matchAny":false,"tags":[],"type":"dashboard"},"type":"dashboard"}]},"editable":true,"fiscalYearStartMonth":0,"graphTooltip":1,"id":null,"links":[],"liveNow":false,"panels":[{"collapsed":false,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":1,"panels":[],"title":"Node Overview","type":"row"},{"datasource":{"type":"prometheus","uid":"prometheus"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":10,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"lineInterpolation":"smooth","lineWidth":2,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"never","spanNulls":true,"stacking":{"group":"A","mode":"none"},"thresholdsStyle":{"mode":"line"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"percent"},"overrides":[]},"gridPos":{"h":8,"w":12,"x":0,"y":1},"id":2,"options":{"legend":{"calcs":["mean","max","lastNotNull"],"displayMode":"table","placement":"bottom","showLegend":true},"tooltip":{"mode":"multi","sort":"none"}},"pluginVersion":"9.5.2","targets":[{"datasource":{"type":"prometheus","uid":"prometheus"},"expr":"sum by (instance) (rate(node_cpu_seconds_total{mode!=\"idle\"}[5m])) / on(instance) sum by (instance) (rate(node_cpu_seconds_total[5m])) * 100","interval":"","legendFormat":"{{instance}}","refId":"A"}],"title":"CPU Usage by Node","type":"timeseries"},{"datasource":{"type":"prometheus","uid":"prometheus"},"fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisCenteredZero":false,"axisColorMode":"text","axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":10,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"lineInterpolation":"smooth","lineWidth":2,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"never","spanNulls":true,"stacking":{"group":"A","mode":"none"},"thresholdsStyle":{"mode":"line"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"percent"},"overrides":[]},"gridPos":{"h":8,"w":12,"x":12,"y":1},"id":3,"options":{"legend":{"calcs":["mean","max","lastNotNull"],"displayMode":"table","placement":"bottom","showLegend":true},"tooltip":{"mode":"multi","sort":"none"}},"pluginVersion":"9.5.2","targets":[{"datasource":{"type":"prometheus","uid":"prometheus"},"expr":"(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100","interval":"","legendFormat":"{{instance}}","refId":"A"}],"title":"Memory Usage by Node","type":"timeseries"}]}

---
# ConfigMap containing Tribe-specific Grafana dashboards
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-tribe
  namespace: monitoring
  labels:
    app: grafana
    part-of: tribe
    tier: observability
data:
  api-gateway.json: ${file:infrastructure/monitoring/dashboards/api-gateway.json}
  microservices.json: ${file:infrastructure/monitoring/dashboards/microservices.json}
  database.json: ${file:infrastructure/monitoring/dashboards/database.json}
  system.json: ${file:infrastructure/monitoring/dashboards/system.json}

---
# PersistentVolumeClaim for Grafana data storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: monitoring
  labels:
    app: grafana
    part-of: tribe
    tier: observability
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2

---
# Deployment for Grafana visualization platform
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    part-of: tribe
    tier: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: grafana
        part-of: tribe
        tier: observability
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      serviceAccountName: grafana
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      containers:
        - name: grafana
          image: grafana/grafana:9.5.2
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          env:
            - name: GF_PATHS_CONFIG
              value: /etc/grafana/grafana.ini
            - name: GF_PATHS_DATA
              value: /var/lib/grafana
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          volumeMounts:
            - name: config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: dashboards-providers
              mountPath: /etc/grafana/provisioning/dashboards
            - name: dashboards-default
              mountPath: /var/lib/grafana/dashboards/default
            - name: dashboards-tribe
              mountPath: /var/lib/grafana/dashboards/tribe
            - name: storage
              mountPath: /var/lib/grafana
      volumes:
        - name: config
          configMap:
            name: grafana-config
        - name: datasources
          configMap:
            name: grafana-datasources
        - name: dashboards-providers
          configMap:
            name: grafana-dashboards-providers
        - name: dashboards-default
          configMap:
            name: grafana-dashboards-default
        - name: dashboards-tribe
          configMap:
            name: grafana-dashboards-tribe
        - name: storage
          persistentVolumeClaim:
            claimName: grafana-storage

---
# Service to expose Grafana within the cluster
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    part-of: tribe
    tier: observability
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
spec:
  selector:
    app: grafana
  ports:
    - name: http
      port: 3000
      targetPort: 3000
      protocol: TCP

---
# Ingress to expose Grafana externally
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: monitoring
  labels:
    app: grafana
    part-of: tribe
    tier: observability
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "120"
spec:
  tls:
    - hosts:
        - monitoring.${DOMAIN_NAME}
      secretName: grafana-tls
  rules:
    - host: monitoring.${DOMAIN_NAME}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  name: http