import logging  # standard library
from typing import List  # standard library

from .data_preprocessing import (  # backend/src/ai-engine/src/utils/data_preprocessing.py
    normalize_profile_data,
    normalize_tribe_data,
    normalize_event_data,
    clean_text_data,
    normalize_numeric_features,
    normalize_categorical_features,
    normalize_temporal_data,
    normalize_location_data,
    handle_missing_values,
    transform_features_for_model,
    batch_normalize_profiles,
    batch_normalize_tribes,
    batch_normalize_events,
    DataNormalizer,
    FeatureTransformer,
    TextPreprocessor
)
from .prompt_engineering import (  # backend/src/ai-engine/src/utils/prompt_engineering.py
    format_prompt,
    create_system_prompt,
    create_user_prompt,
    create_chat_completion_messages,
    optimize_prompt_for_model,
    get_matching_prompt,
    get_personality_analysis_prompt,
    get_engagement_prompt,
    get_recommendation_prompt,
    PromptTemplate,
    PromptManager,
    MatchingPromptGenerator,
    EngagementPromptGenerator,
    RecommendationPromptGenerator,
    PersonalityPromptGenerator,
    SYSTEM_PROMPT_TEMPLATES,
    USER_PROMPT_TEMPLATES
)
from .text_processing import (  # backend/src/ai-engine/src/utils/text_processing.py
    tokenize_text,
    remove_stopwords,
    lemmatize_tokens,
    stem_tokens,
    extract_entities,
    extract_keywords,
    calculate_text_similarity,
    analyze_sentiment,
    extract_topics,
    summarize_text,
    extract_communication_style,
    batch_process_texts,
    TextAnalyzer,
    TextVectorizer,
    SentimentAnalyzer
)

# Set up logger
logger = logging.getLogger(__name__)

# Define __all__ to control what gets imported with from utils import *
__all__ = [
    'normalize_profile_data',
    'normalize_tribe_data',
    'normalize_event_data',
    'clean_text_data',
    'normalize_numeric_features',
    'normalize_categorical_features',
    'normalize_temporal_data',
    'normalize_location_data',
    'handle_missing_values',
    'transform_features_for_model',
    'batch_normalize_profiles',
    'batch_normalize_tribes',
    'batch_normalize_events',
    'DataNormalizer',
    'FeatureTransformer',
    'TextPreprocessor',
    'format_prompt',
    'create_system_prompt',
    'create_user_prompt',
    'create_chat_completion_messages',
    'optimize_prompt_for_model',
    'get_matching_prompt',
    'get_personality_analysis_prompt',
    'get_engagement_prompt',
    'get_recommendation_prompt',
    'PromptTemplate',
    'PromptManager',
    'MatchingPromptGenerator',
    'EngagementPromptGenerator',
    'RecommendationPromptGenerator',
    'PersonalityPromptGenerator',
    'SYSTEM_PROMPT_TEMPLATES',
    'USER_PROMPT_TEMPLATES',
    'tokenize_text',
    'remove_stopwords',
    'lemmatize_tokens',
    'stem_tokens',
    'extract_entities',
    'extract_keywords',
    'calculate_text_similarity',
    'analyze_sentiment',
    'extract_topics',
    'summarize_text',
    'extract_communication_style',
    'batch_process_texts',
    'TextAnalyzer',
    'TextVectorizer',
    'SentimentAnalyzer'
]